// Mocks generated by Mockito 5.4.4 from annotations
// in photo_gallery/test/helpers/mock_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;

import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i2;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:photo_gallery/models/domain/photo.dart' as _i7;
import 'package:photo_gallery/repositories/interfaces/i_photo_repository.dart'
    as _i4;
import 'package:photo_gallery/services/interfaces/i_cache_service.dart' as _i8;
import 'package:photo_gallery/services/interfaces/i_photo_cache_manager.dart'
    as _i9;
import 'package:photo_gallery/services/interfaces/i_photo_service.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseCacheManager_0 extends _i1.SmartFake
    implements _i2.BaseCacheManager {
  _FakeBaseCacheManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IPhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPhotoRepository extends _i1.Mock implements _i4.IPhotoRepository {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i6.Future<List<_i7.Photo>> fetchPhotos() => (super.noSuchMethod(
        Invocation.method(
          #fetchPhotos,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
      ) as _i6.Future<List<_i7.Photo>>);

  @override
  _i6.Future<_i7.Photo?> fetchPhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchPhoto,
          [id],
        ),
        returnValue: _i6.Future<_i7.Photo?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.Photo?>.value(),
      ) as _i6.Future<_i7.Photo?>);

  @override
  _i6.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> generatePhotos({
    required String? sourcePhoto,
    required String? additionalPrompt,
    required int? count,
    int? seed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generatePhotos,
          [],
          {
            #sourcePhoto: sourcePhoto,
            #additionalPrompt: additionalPrompt,
            #count: count,
            #seed: seed,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ICacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockICacheService extends _i1.Mock implements _i8.ICacheService {
  @override
  _i6.Stream<_i8.CacheStats> get stats => (super.noSuchMethod(
        Invocation.getter(#stats),
        returnValue: _i6.Stream<_i8.CacheStats>.empty(),
        returnValueForMissingStub: _i6.Stream<_i8.CacheStats>.empty(),
      ) as _i6.Stream<_i8.CacheStats>);

  @override
  _i6.Future<void> put(
    String? key,
    dynamic data, {
    Duration? maxAge,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            data,
          ],
          {#maxAge: maxAge},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<T?> get<T>(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i6.Future<T?>.value(),
        returnValueForMissingStub: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);

  @override
  _i6.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IPhotoCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPhotoCacheManager extends _i1.Mock
    implements _i9.IPhotoCacheManager {
  @override
  _i2.BaseCacheManager get cacheManager => (super.noSuchMethod(
        Invocation.getter(#cacheManager),
        returnValue: _FakeBaseCacheManager_0(
          this,
          Invocation.getter(#cacheManager),
        ),
        returnValueForMissingStub: _FakeBaseCacheManager_0(
          this,
          Invocation.getter(#cacheManager),
        ),
      ) as _i2.BaseCacheManager);

  @override
  _i6.Stream<_i8.CacheStats> get stats => (super.noSuchMethod(
        Invocation.getter(#stats),
        returnValue: _i6.Stream<_i8.CacheStats>.empty(),
        returnValueForMissingStub: _i6.Stream<_i8.CacheStats>.empty(),
      ) as _i6.Stream<_i8.CacheStats>);

  @override
  _i6.Future<void> put(
    String? key,
    dynamic data, {
    Duration? maxAge,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            data,
          ],
          {#maxAge: maxAge},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<T?> get<T>(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i6.Future<T?>.value(),
        returnValueForMissingStub: _i6.Future<T?>.value(),
      ) as _i6.Future<T?>);

  @override
  _i6.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.Client {
  @override
  _i6.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i3.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
        returnValueForMissingStub:
            _i6.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i6.Future<_i11.Uint8List>);

  @override
  _i6.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IPhotoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPhotoService extends _i1.Mock implements _i12.IPhotoService {
  @override
  _i6.Future<List<_i7.Photo>> getPhotos() => (super.noSuchMethod(
        Invocation.method(
          #getPhotos,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
        returnValueForMissingStub:
            _i6.Future<List<_i7.Photo>>.value(<_i7.Photo>[]),
      ) as _i6.Future<List<_i7.Photo>>);

  @override
  _i6.Future<_i7.Photo?> getPhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPhoto,
          [id],
        ),
        returnValue: _i6.Future<_i7.Photo?>.value(),
        returnValueForMissingStub: _i6.Future<_i7.Photo?>.value(),
      ) as _i6.Future<_i7.Photo?>);

  @override
  _i6.Future<void> deletePhoto(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePhoto,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> refreshPhotos() => (super.noSuchMethod(
        Invocation.method(
          #refreshPhotos,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String getPhotoUrl(String? filename) => (super.noSuchMethod(
        Invocation.method(
          #getPhotoUrl,
          [filename],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPhotoUrl,
            [filename],
          ),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPhotoUrl,
            [filename],
          ),
        ),
      ) as String);

  @override
  String getThumbnailUrl(String? filename) => (super.noSuchMethod(
        Invocation.method(
          #getThumbnailUrl,
          [filename],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getThumbnailUrl,
            [filename],
          ),
        ),
        returnValueForMissingStub: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getThumbnailUrl,
            [filename],
          ),
        ),
      ) as String);

  @override
  _i6.Future<void> generateMoreLikeThis({
    required String? sourcePhoto,
    required String? additionalPrompt,
    required int? count,
    int? seed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMoreLikeThis,
          [],
          {
            #sourcePhoto: sourcePhoto,
            #additionalPrompt: additionalPrompt,
            #count: count,
            #seed: seed,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
